generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  emailVerified DateTime? @map("email_verified_at")
  passwordHash  String?  @map("password_hash")
  displayName   String?  @map("display_name")
  avatarUrl     String?  @map("avatar_url")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  sessions      Session[]
  favourites    Favourite[]
  alerts        Alert[]
  userXp        UserXp?
  achievements  UserAchievement[]
}

model Session {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  lastSeenAt DateTime? @map("last_seen_at")
}

model Favourite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  favType   String   @map("fav_type")
  refId     String   @map("ref_id")
  label     String?
  createdAt DateTime @default(now()) @map("created_at")
}

model Alert {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  alertType String   @map("alert_type")
  criteria  Json
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
}

model Operator {
  id       String   @id
  name     String
  groups   String[]
  boroughs String[]
  depots   String[]
  routes   Route[]
  vehicles Vehicle[]
}

model Route {
  id         String   @id
  name       String?
  mode       String?
  operator   Operator? @relation(fields: [operatorId], references: [id])
  operatorId String?
  origin     String?
  destination String?
  isNight    Boolean @default(false) @map("is_night")
  isSchool   Boolean @default(false) @map("is_school")
  metadata   Json?
  active     Boolean @default(true)
  stops      StopSequence[]
  disruptions Disruption[]
  sightings  Sighting[]
}

model Stop {
  id          String   @id
  name        String?
  platformName String? @map("platform_name")
  lat         Float?
  lon         Float?
  indicators  String[]
  lines       String[]
  borough     String?
  zone        String?
  metadata    Json?
  sequences   StopSequence[]
  disruptions Disruption[]
  sightings   Sighting[]
}

model StopSequence {
  id        BigInt  @id @default(autoincrement())
  route     Route   @relation(fields: [routeId], references: [id])
  routeId   String  @map("route_id")
  direction String
  sequence  Int
  stop      Stop    @relation(fields: [stopId], references: [id])
  stopId    String  @map("stop_id")
}

model Disruption {
  id        String   @id
  route     Route?   @relation(fields: [routeId], references: [id])
  routeId   String?  @map("route_id")
  stop      Stop?    @relation(fields: [stopId], references: [id])
  stopId    String?  @map("stop_id")
  title     String?
  category  String?
  severity  String?
  description String?
  startTime DateTime? @map("start_time")
  endTime   DateTime? @map("end_time")
  raw       Json?
}

model Vehicle {
  id         String   @id @default(uuid())
  operator   Operator? @relation(fields: [operatorId], references: [id])
  operatorId String?   @map("operator_id")
  fleetNumber String?  @map("fleet_number")
  registration String?
  make        String?
  model       String?
  year        Int?
  depot       String?
  notes       String?
  isActive    Boolean @default(true) @map("is_active")
  metadata    Json?
  sightings   Sighting[]
}

model Sighting {
  id        String   @id @default(uuid())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String   @map("vehicle_id")
  route     Route?   @relation(fields: [routeId], references: [id])
  routeId   String?  @map("route_id")
  stop      Stop?    @relation(fields: [stopId], references: [id])
  stopId    String?  @map("stop_id")
  observedAt DateTime @map("observed_at")
  source    String
  raw       Json?
}

model WithdrawnRoute {
  id         String @id
  name       String?
  origin     String?
  destination String?
  startDate  DateTime? @map("start_date")
  endDate    DateTime? @map("end_date")
  reason     String?
  successorIds String[] @map("successor_ids")
}

model Achievement {
  id          String @id
  name        String
  description String?
  icon        String?
  rules       Json?
  users       UserAchievement[]
}

model UserXp {
  user        User   @relation(fields: [userId], references: [id])
  userId      String @id @map("user_id")
  xp          Int    @default(0)
  level       Int    @default(1)
  streakDays  Int    @default(0) @map("streak_days")
  lastCheckin DateTime? @map("last_checkin")
}

model UserAchievement {
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @map("user_id")
  achievement Achievement @relation(fields: [achievementId], references: [id])
  achievementId String   @map("achievement_id")
  earnedAt   DateTime    @map("earned_at")
  @@id([userId, achievementId])
}
